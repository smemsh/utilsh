#!/bin/bash
#
# mk4group
#   recursively makes dirs group-owned, setgid, and copies user mode to group
#
# args:
#   - system group to chgrp given as $1
#   - all remaining args: trees to be recursively converted
#
# note
#   - fragile, probably breaks with a range of input
#   - definitely breaks if spaces in args, no quoting done
#
# scott@smemsh.net
# http://smemsh.net/src/utilsh/
# http://spdx.org/licenses/GPL-2.0
#
##############################################################################

bomb ()
{
	echo "$@" >&2
	exit 1
}

###

dirtree_setgid_on_dirs ()
{
	local dir=$1
	find $dir/ -type d -print0 \
	| xargs -r0 chmod g+s
}

dirtree_change_group ()
{
	local grp=$1
	local dir=$2
	chgrp -R $grp $dir/
}

dirtree_user2group_baseperm ()
{
	local dir=$1

	getfacl --recursive --access $dir |
	sed -e '
		/^user:/ { h; b; }			# hold onto user perms
		/^group:/ { x; s/^user:/group:/; b; }	# group becomes held
	' |
	setfacl --restore=-
}

##############################################################################

main ()
{
	local group=$1; shift
	local dir dirent path parent

	gid=$(getent group $group | awk -F : '{print $(NF-1)}')
	[[ $gid ]] || bomb "group $group does not look up"

	for ((i = 1; i <= $#; i++))
	do
		dir=${!i}
		test -d $dir
		test -w $dir

		# need to qualify/deref, for when eg '.'
		# TODO this is hack, everything should take path
		#
		path=`readlink -e $dir`
		parent=${path%/*}
		dirent=${path##*/}

		cd $parent
		dirtree_change_group $gid $path
		dirtree_setgid_on_dirs $path
		dirtree_user2group_baseperm $dirent
		cd $OLDPWD
	done
}

###

set -e
main "$@"
