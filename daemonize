#!/usr/bin/env bash
#
# daemonize
#   initialize environment, fork/exec, setsid/disown, stdout/err to syslog
#
# desc
#   - performs all the steps daemons do in C programs, but for shell scripts
#   - use logger to redirect stdout and stderr to syslog using given prefix
#   - starts daemon with clean environment (only "standard" base env retained)
#
# args
#   - arg1: quoted string, will be unquoted to make argv for invoked program
#   - arg2: prefix to use (less colons) in syslog messages
#   - (if one arg supplied, log prefix will be invocation name)
#
# todo
#   - code to close fds exists, but commented out, need to test
#
# https://github.com/smemsh/utilsh/
# https://spdx.org/licenses/GPL-2.0
# scott@smemsh.net
#
##############################################################################

argzero=$0
startargv=($1)
logprefix="$2"

###

parse_args ()
{
	progname=$(readlink --silent --canonicalize --no-newline "$0")
	progname=${progname##*/}

	if (($# == 1)); then
		logprefix=$startargv
	elif (($# != 2)); then
		echo "$progname: badargs" >&2; exit 10
	fi

	if ! type -p $startargv &>/dev/null; then
		echo "$progname: dne" >&2; exit 20; fi
}

nullify_stdio_fds ()
{
	exec </dev/null
	exec &>/dev/null
}

# otherwise some programs, like lvm tools for example, leak fds to the
# daemonized version that we do not want (and the shell itself may use up to
# fd 10 for its own internal purposes, if memory serves)
#
close_nonstd_fds ()
{
	local BASHOPTS
	shopt -u failglob nullglob
	for fd in /proc/$BASHPID/fd/{3..255}; do
		exec $fd<&-; done
}

##############################################################################

main ()
{
	parse_args "$@"

	cd /

	# TODO test
	#nullify_stdio_fds
	#close_nonstd_fds

	set -o pipefail

	exec setsid env -i \
	LOGNAME=$LOGNAME \
	USER=$USER \
	HOME=$HOME \
	PATH=$PATH \
	EDITOR=$EDITOR \
	DISPLAY=$DISPLAY \
	SHELL=$SHELL \
	TERM=$TERM \
	LANG=$LANG \
	${startargv[@]} |&
	logger -t "$logprefix" \
	&>/dev/null \
	& disown $!
}

main "$@"
